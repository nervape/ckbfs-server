version: '3.8'

services:
  ckbfs-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ckbfs-server
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - CKB_NETWORK=${CKB_NETWORK:-testnet}
      - API_VERSION=${API_VERSION:-v1}
      - API_PREFIX=${API_PREFIX:-/api}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - CORS_METHODS=${CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - CORS_HEADERS=${CORS_HEADERS:-Content-Type,Authorization}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-combined}
      - CACHE_TTL=${CACHE_TTL:-300}
      - CACHE_MAX_SIZE=${CACHE_MAX_SIZE:-100}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - HELMET_ENABLED=${HELMET_ENABLED:-true}
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ckbfs-network

  # Development service
  ckbfs-server-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ckbfs-server-dev
    ports:
      - "${DEV_PORT:-3001}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - CKB_NETWORK=${CKB_NETWORK:-testnet}
      - API_VERSION=${API_VERSION:-v1}
      - API_PREFIX=${API_PREFIX:-/api}
      - CORS_ORIGIN=*
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - ckbfs-network
    profiles:
      - dev

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ckbfs-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ckbfs-server
    networks:
      - ckbfs-network
    profiles:
      - nginx

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ckbfs-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ckbfs-network
    profiles:
      - cache

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ckbfs-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ckbfs-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ckbfs-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ckbfs-network
    profiles:
      - monitoring

networks:
  ckbfs-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
